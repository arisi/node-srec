// Generated by CoffeeScript 1.4.0
(function() {
  var fn, fs;

  fs = require('fs');

  fn = "/home/arisi/projects/mygit/arisi/ctex_apps/bin/appi.srec";

  module.exports.readSrecFile = function(fn) {
    var addr, alen, b, boot, byte, dp, i, info, len, max, mem, min, s, srecs, type, _i, _j, _k, _len, _len1, _ref;
    mem = {};
    boot = null;
    info = "";
    min = null;
    max = null;
    srecs = fs.readFileSync(fn, 'utf8').split("\n");
    for (_i = 0, _len = srecs.length; _i < _len; _i++) {
      s = srecs[_i];
      if (s[0] === "S") {
        switch (type = parseInt(s[1])) {
          case 0:
          case 1:
          case 9:
          case 5:
            alen = 2;
            break;
          case 2:
          case 6:
          case 8:
            alen = 3;
            break;
          case 3:
          case 7:
            alen = 4;
            break;
          default:
            continue;
        }
        addr = parseInt(s.slice(4, 4 + alen * 2), 16);
        dp = 4 + alen * 2;
        b = [];
        len = parseInt(s.slice(2, 4), 16);
        for (i = _j = _ref = alen + 2; _ref <= len ? _j <= len : _j >= len; i = _ref <= len ? ++_j : --_j) {
          b.push(parseInt(s.slice(i * 2, +(i * 2 + 1) + 1 || 9e9), 16));
        }
        switch (type) {
          case 1:
          case 2:
          case 3:
            mem[addr] = b;
            if (!min || addr < min) {
              min = addr;
            }
            if (!max || addr + b.length > max) {
              max = addr;
            }
            break;
          case 7:
          case 8:
          case 9:
            boot = addr;
            break;
          case 0:
            for (_k = 0, _len1 = b.length; _k < _len1; _k++) {
              byte = b[_k];
              info += String.fromCharCode(byte);
            }
        }
      }
    }
    return {
      recs: mem,
      min: min,
      max: max,
      boot: boot,
      info: info
    };
  };

}).call(this);
